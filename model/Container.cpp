/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Container.h"

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

Container::Container()
{
    m_Container_id = utility::conversions::to_string_t("");
    m_Container_idIsSet = false;
    m_Epc_code = utility::conversions::to_string_t("");
    m_Epc_codeIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Barcode = utility::conversions::to_string_t("");
    m_BarcodeIsSet = false;
    m_Rf_id = utility::conversions::to_string_t("");
    m_Rf_idIsSet = false;
    m_Quantity = 0.0;
    m_QuantityIsSet = false;
    m_Unit = utility::conversions::to_string_t("");
    m_UnitIsSet = false;
    m_Current_location_id = utility::conversions::to_string_t("");
    m_Current_location_idIsSet = false;
    m_Owner_stakeholder_id = utility::conversions::to_string_t("");
    m_Owner_stakeholder_idIsSet = false;
    m_Parent_container_id = utility::conversions::to_string_t("");
    m_Parent_container_idIsSet = false;
}

Container::~Container()
{
}

void Container::validate()
{
    // TODO: implement validation
}

web::json::value Container::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Container_idIsSet)
    {
        val[utility::conversions::to_string_t("container_id")] = ModelBase::toJson(m_Container_id);
    }
    if(m_Epc_codeIsSet)
    {
        val[utility::conversions::to_string_t("epc_code")] = ModelBase::toJson(m_Epc_code);
    }
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t("label")] = ModelBase::toJson(m_Label);
    }
    if(m_BarcodeIsSet)
    {
        val[utility::conversions::to_string_t("barcode")] = ModelBase::toJson(m_Barcode);
    }
    if(m_Rf_idIsSet)
    {
        val[utility::conversions::to_string_t("rf_id")] = ModelBase::toJson(m_Rf_id);
    }
    if(m_QuantityIsSet)
    {
        val[utility::conversions::to_string_t("quantity")] = ModelBase::toJson(m_Quantity);
    }
    if(m_UnitIsSet)
    {
        val[utility::conversions::to_string_t("unit")] = ModelBase::toJson(m_Unit);
    }
    if(m_Current_location_idIsSet)
    {
        val[utility::conversions::to_string_t("current_location_id")] = ModelBase::toJson(m_Current_location_id);
    }
    if(m_Owner_stakeholder_idIsSet)
    {
        val[utility::conversions::to_string_t("owner_stakeholder_id")] = ModelBase::toJson(m_Owner_stakeholder_id);
    }
    if(m_Parent_container_idIsSet)
    {
        val[utility::conversions::to_string_t("parent_container_id")] = ModelBase::toJson(m_Parent_container_id);
    }

    return val;
}

void Container::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("container_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("container_id"));
        if(!fieldValue.is_null())
        {
            setContainerId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("epc_code")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("epc_code"));
        if(!fieldValue.is_null())
        {
            setEpcCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("label")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("label"));
        if(!fieldValue.is_null())
        {
            setLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("barcode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("barcode"));
        if(!fieldValue.is_null())
        {
            setBarcode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rf_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rf_id"));
        if(!fieldValue.is_null())
        {
            setRfId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("quantity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("quantity"));
        if(!fieldValue.is_null())
        {
            setQuantity(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unit"));
        if(!fieldValue.is_null())
        {
            setUnit(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_location_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_location_id"));
        if(!fieldValue.is_null())
        {
            setCurrentLocationId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("owner_stakeholder_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("owner_stakeholder_id"));
        if(!fieldValue.is_null())
        {
            setOwnerStakeholderId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parent_container_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parent_container_id"));
        if(!fieldValue.is_null())
        {
            setParentContainerId(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Container::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Container_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("container_id"), m_Container_id));
    }
    if(m_Epc_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("epc_code"), m_Epc_code));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("label"), m_Label));
    }
    if(m_BarcodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("barcode"), m_Barcode));
    }
    if(m_Rf_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rf_id"), m_Rf_id));
    }
    if(m_QuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quantity"), m_Quantity));
    }
    if(m_UnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unit"), m_Unit));
    }
    if(m_Current_location_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_location_id"), m_Current_location_id));
    }
    if(m_Owner_stakeholder_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owner_stakeholder_id"), m_Owner_stakeholder_id));
    }
    if(m_Parent_container_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parent_container_id"), m_Parent_container_id));
    }
}

void Container::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("container_id")))
    {
        setContainerId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("container_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("epc_code")))
    {
        setEpcCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("epc_code"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("label")))
    {
        setLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("label"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("barcode")))
    {
        setBarcode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("barcode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rf_id")))
    {
        setRfId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rf_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quantity")))
    {
        setQuantity(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("quantity"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unit")))
    {
        setUnit(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_location_id")))
    {
        setCurrentLocationId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_location_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owner_stakeholder_id")))
    {
        setOwnerStakeholderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("owner_stakeholder_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parent_container_id")))
    {
        setParentContainerId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("parent_container_id"))));
    }
}

utility::string_t Container::getContainerId() const
{
    return m_Container_id;
}

void Container::setContainerId(const utility::string_t& value)
{
    m_Container_id = value;
    m_Container_idIsSet = true;
}

bool Container::containerIdIsSet() const
{
    return m_Container_idIsSet;
}

void Container::unsetContainer_id()
{
    m_Container_idIsSet = false;
}

utility::string_t Container::getEpcCode() const
{
    return m_Epc_code;
}

void Container::setEpcCode(const utility::string_t& value)
{
    m_Epc_code = value;
    m_Epc_codeIsSet = true;
}

bool Container::epcCodeIsSet() const
{
    return m_Epc_codeIsSet;
}

void Container::unsetEpc_code()
{
    m_Epc_codeIsSet = false;
}

utility::string_t Container::getLabel() const
{
    return m_Label;
}

void Container::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool Container::labelIsSet() const
{
    return m_LabelIsSet;
}

void Container::unsetLabel()
{
    m_LabelIsSet = false;
}

utility::string_t Container::getBarcode() const
{
    return m_Barcode;
}

void Container::setBarcode(const utility::string_t& value)
{
    m_Barcode = value;
    m_BarcodeIsSet = true;
}

bool Container::barcodeIsSet() const
{
    return m_BarcodeIsSet;
}

void Container::unsetBarcode()
{
    m_BarcodeIsSet = false;
}

utility::string_t Container::getRfId() const
{
    return m_Rf_id;
}

void Container::setRfId(const utility::string_t& value)
{
    m_Rf_id = value;
    m_Rf_idIsSet = true;
}

bool Container::rfIdIsSet() const
{
    return m_Rf_idIsSet;
}

void Container::unsetRf_id()
{
    m_Rf_idIsSet = false;
}

double Container::getQuantity() const
{
    return m_Quantity;
}

void Container::setQuantity(double value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}

bool Container::quantityIsSet() const
{
    return m_QuantityIsSet;
}

void Container::unsetQuantity()
{
    m_QuantityIsSet = false;
}

utility::string_t Container::getUnit() const
{
    return m_Unit;
}

void Container::setUnit(const utility::string_t& value)
{
    m_Unit = value;
    m_UnitIsSet = true;
}

bool Container::unitIsSet() const
{
    return m_UnitIsSet;
}

void Container::unsetUnit()
{
    m_UnitIsSet = false;
}

utility::string_t Container::getCurrentLocationId() const
{
    return m_Current_location_id;
}

void Container::setCurrentLocationId(const utility::string_t& value)
{
    m_Current_location_id = value;
    m_Current_location_idIsSet = true;
}

bool Container::currentLocationIdIsSet() const
{
    return m_Current_location_idIsSet;
}

void Container::unsetCurrent_location_id()
{
    m_Current_location_idIsSet = false;
}

utility::string_t Container::getOwnerStakeholderId() const
{
    return m_Owner_stakeholder_id;
}

void Container::setOwnerStakeholderId(const utility::string_t& value)
{
    m_Owner_stakeholder_id = value;
    m_Owner_stakeholder_idIsSet = true;
}

bool Container::ownerStakeholderIdIsSet() const
{
    return m_Owner_stakeholder_idIsSet;
}

void Container::unsetOwner_stakeholder_id()
{
    m_Owner_stakeholder_idIsSet = false;
}

utility::string_t Container::getParentContainerId() const
{
    return m_Parent_container_id;
}

void Container::setParentContainerId(const utility::string_t& value)
{
    m_Parent_container_id = value;
    m_Parent_container_idIsSet = true;
}

bool Container::parentContainerIdIsSet() const
{
    return m_Parent_container_idIsSet;
}

void Container::unsetParent_container_id()
{
    m_Parent_container_idIsSet = false;
}

}
}
}
}
}
}

