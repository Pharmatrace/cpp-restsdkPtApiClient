/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Transaction.h
 *
 * 
 */

#ifndef IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Transaction_H_
#define IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Transaction_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

/// <summary>
/// 
/// </summary>
class  Transaction
    : public ModelBase
{
public:
    Transaction();
    virtual ~Transaction();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Transaction members

    /// <summary>
    /// GMT, Unix Epoch
    /// </summary>
    int64_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(int64_t value);

    /// <summary>
    /// unique id hash of the transaction
    /// </summary>
    utility::string_t getTxUid() const;
    bool txUidIsSet() const;
    void unsetTx_uid();

    void setTxUid(const utility::string_t& value);

    /// <summary>
    /// id reference to the terms and conditions for this transaction
    /// </summary>
    utility::string_t getTermsId() const;
    bool termsIdIsSet() const;
    void unsetTerms_id();

    void setTermsId(const utility::string_t& value);

    /// <summary>
    /// hyperledger channel the transaction has been executed in
    /// </summary>
    utility::string_t getTransactionChannel() const;
    bool transactionChannelIsSet() const;
    void unsetTransaction_channel();

    void setTransactionChannel(const utility::string_t& value);


protected:
    int64_t m_Timestamp;
    bool m_TimestampIsSet;
    utility::string_t m_Tx_uid;
    bool m_Tx_uidIsSet;
    utility::string_t m_Terms_id;
    bool m_Terms_idIsSet;
    utility::string_t m_Transaction_channel;
    bool m_Transaction_channelIsSet;
};

}
}
}
}
}
}

#endif /* IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Transaction_H_ */
