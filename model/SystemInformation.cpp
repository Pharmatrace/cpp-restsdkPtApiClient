/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SystemInformation.h"

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

SystemInformation::SystemInformation()
{
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_Header = utility::conversions::to_string_t("");
    m_HeaderIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
}

SystemInformation::~SystemInformation()
{
}

void SystemInformation::validate()
{
    // TODO: implement validation
}

web::json::value SystemInformation::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t("uuid")] = ModelBase::toJson(m_Uuid);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t("language")] = ModelBase::toJson(m_Language);
    }
    if(m_HeaderIsSet)
    {
        val[utility::conversions::to_string_t("header")] = ModelBase::toJson(m_Header);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }

    return val;
}

void SystemInformation::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("uuid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uuid"));
        if(!fieldValue.is_null())
        {
            setUuid(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("language")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("language"));
        if(!fieldValue.is_null())
        {
            setLanguage(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("header")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("header"));
        if(!fieldValue.is_null())
        {
            setHeader(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            setMessage(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void SystemInformation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uuid"), m_Uuid));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("language"), m_Language));
    }
    if(m_HeaderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("header"), m_Header));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
}

void SystemInformation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("uuid")))
    {
        setUuid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("uuid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("language")))
    {
        setLanguage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("language"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("header")))
    {
        setHeader(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("header"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        setMessage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("message"))));
    }
}

utility::string_t SystemInformation::getUuid() const
{
    return m_Uuid;
}

void SystemInformation::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool SystemInformation::uuidIsSet() const
{
    return m_UuidIsSet;
}

void SystemInformation::unsetUuid()
{
    m_UuidIsSet = false;
}

utility::string_t SystemInformation::getLanguage() const
{
    return m_Language;
}

void SystemInformation::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool SystemInformation::languageIsSet() const
{
    return m_LanguageIsSet;
}

void SystemInformation::unsetLanguage()
{
    m_LanguageIsSet = false;
}

utility::string_t SystemInformation::getHeader() const
{
    return m_Header;
}

void SystemInformation::setHeader(const utility::string_t& value)
{
    m_Header = value;
    m_HeaderIsSet = true;
}

bool SystemInformation::headerIsSet() const
{
    return m_HeaderIsSet;
}

void SystemInformation::unsetHeader()
{
    m_HeaderIsSet = false;
}

utility::string_t SystemInformation::getMessage() const
{
    return m_Message;
}

void SystemInformation::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool SystemInformation::messageIsSet() const
{
    return m_MessageIsSet;
}

void SystemInformation::unsetMessage()
{
    m_MessageIsSet = false;
}

}
}
}
}
}
}

