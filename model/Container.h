/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Container.h
 *
 * 
 */

#ifndef IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Container_H_
#define IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Container_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

/// <summary>
/// 
/// </summary>
class  Container
    : public ModelBase
{
public:
    Container();
    virtual ~Container();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Container members

    /// <summary>
    /// Unique identifier representing a specific container.
    /// </summary>
    utility::string_t getContainerId() const;
    bool containerIdIsSet() const;
    void unsetContainer_id();

    void setContainerId(const utility::string_t& value);

    /// <summary>
    /// EPC code
    /// </summary>
    utility::string_t getEpcCode() const;
    bool epcCodeIsSet() const;
    void unsetEpc_code();

    void setEpcCode(const utility::string_t& value);

    /// <summary>
    /// Serialization label.
    /// </summary>
    utility::string_t getLabel() const;
    bool labelIsSet() const;
    void unsetLabel();

    void setLabel(const utility::string_t& value);

    /// <summary>
    /// barcode on container. Normally equal to container id.
    /// </summary>
    utility::string_t getBarcode() const;
    bool barcodeIsSet() const;
    void unsetBarcode();

    void setBarcode(const utility::string_t& value);

    /// <summary>
    /// RFID of RF tracking label on conatiner.
    /// </summary>
    utility::string_t getRfId() const;
    bool rfIdIsSet() const;
    void unsetRf_id();

    void setRfId(const utility::string_t& value);

    /// <summary>
    /// quantity of product in container.
    /// </summary>
    double getQuantity() const;
    bool quantityIsSet() const;
    void unsetQuantity();

    void setQuantity(double value);

    /// <summary>
    /// Unit for quantity measurement.
    /// </summary>
    utility::string_t getUnit() const;
    bool unitIsSet() const;
    void unsetUnit();

    void setUnit(const utility::string_t& value);

    /// <summary>
    /// Location id of last tracked locaction.
    /// </summary>
    utility::string_t getCurrentLocationId() const;
    bool currentLocationIdIsSet() const;
    void unsetCurrent_location_id();

    void setCurrentLocationId(const utility::string_t& value);

    /// <summary>
    /// stakeholder id of the last tracked owner of the container.
    /// </summary>
    utility::string_t getOwnerStakeholderId() const;
    bool ownerStakeholderIdIsSet() const;
    void unsetOwner_stakeholder_id();

    void setOwnerStakeholderId(const utility::string_t& value);

    /// <summary>
    /// id of the parent container or null.
    /// </summary>
    utility::string_t getParentContainerId() const;
    bool parentContainerIdIsSet() const;
    void unsetParent_container_id();

    void setParentContainerId(const utility::string_t& value);


protected:
    utility::string_t m_Container_id;
    bool m_Container_idIsSet;
    utility::string_t m_Epc_code;
    bool m_Epc_codeIsSet;
    utility::string_t m_Label;
    bool m_LabelIsSet;
    utility::string_t m_Barcode;
    bool m_BarcodeIsSet;
    utility::string_t m_Rf_id;
    bool m_Rf_idIsSet;
    double m_Quantity;
    bool m_QuantityIsSet;
    utility::string_t m_Unit;
    bool m_UnitIsSet;
    utility::string_t m_Current_location_id;
    bool m_Current_location_idIsSet;
    utility::string_t m_Owner_stakeholder_id;
    bool m_Owner_stakeholder_idIsSet;
    utility::string_t m_Parent_container_id;
    bool m_Parent_container_idIsSet;
};

}
}
}
}
}
}

#endif /* IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Container_H_ */
