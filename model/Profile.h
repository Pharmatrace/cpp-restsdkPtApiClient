/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Profile.h
 *
 * 
 */

#ifndef IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Profile_H_
#define IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Profile_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

/// <summary>
/// 
/// </summary>
class  Profile
    : public ModelBase
{
public:
    Profile();
    virtual ~Profile();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Profile members

    /// <summary>
    /// First name of the PT network user.
    /// </summary>
    utility::string_t getFirstName() const;
    bool firstNameIsSet() const;
    void unsetFirst_name();

    void setFirstName(const utility::string_t& value);

    /// <summary>
    /// Last name of the PT network user.
    /// </summary>
    utility::string_t getLastName() const;
    bool lastNameIsSet() const;
    void unsetLast_name();

    void setLastName(const utility::string_t& value);

    /// <summary>
    /// Email address
    /// </summary>
    utility::string_t getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();

    void setEmail(const utility::string_t& value);

    /// <summary>
    /// Twitter name
    /// </summary>
    utility::string_t getTwitterName() const;
    bool twitterNameIsSet() const;
    void unsetTwitter_name();

    void setTwitterName(const utility::string_t& value);

    /// <summary>
    /// LinkedIn name
    /// </summary>
    utility::string_t getLinkedinName() const;
    bool linkedinNameIsSet() const;
    void unsetLinkedin_name();

    void setLinkedinName(const utility::string_t& value);

    /// <summary>
    /// Facebook name
    /// </summary>
    utility::string_t getFacebookName() const;
    bool facebookNameIsSet() const;
    void unsetFacebook_name();

    void setFacebookName(const utility::string_t& value);

    /// <summary>
    /// Image URL
    /// </summary>
    utility::string_t getPicture() const;
    bool pictureIsSet() const;
    void unsetPicture();

    void setPicture(const utility::string_t& value);

    /// <summary>
    /// the PT network member that the user/profile is assigned to.
    /// </summary>
    utility::string_t getStakeholderId() const;
    bool stakeholderIdIsSet() const;
    void unsetStakeholder_id();

    void setStakeholderId(const utility::string_t& value);

    /// <summary>
    /// true if the user is currently active. Inactive users will be anonymized but not deleted to maintain integrity of transaction history
    /// </summary>
    bool isActive() const;
    bool activeIsSet() const;
    void unsetActive();

    void setActive(bool value);


protected:
    utility::string_t m_First_name;
    bool m_First_nameIsSet;
    utility::string_t m_Last_name;
    bool m_Last_nameIsSet;
    utility::string_t m_Email;
    bool m_EmailIsSet;
    utility::string_t m_Twitter_name;
    bool m_Twitter_nameIsSet;
    utility::string_t m_Linkedin_name;
    bool m_Linkedin_nameIsSet;
    utility::string_t m_Facebook_name;
    bool m_Facebook_nameIsSet;
    utility::string_t m_Picture;
    bool m_PictureIsSet;
    utility::string_t m_Stakeholder_id;
    bool m_Stakeholder_idIsSet;
    bool m_Active;
    bool m_ActiveIsSet;
};

}
}
}
}
}
}

#endif /* IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Profile_H_ */
