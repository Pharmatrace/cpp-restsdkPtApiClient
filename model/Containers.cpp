/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Containers.h"

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

Containers::Containers()
{
    m_Offset = 0;
    m_OffsetIsSet = false;
    m_Limit = 0;
    m_LimitIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_ListingIsSet = false;
}

Containers::~Containers()
{
}

void Containers::validate()
{
    // TODO: implement validation
}

web::json::value Containers::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_OffsetIsSet)
    {
        val[utility::conversions::to_string_t("offset")] = ModelBase::toJson(m_Offset);
    }
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t("limit")] = ModelBase::toJson(m_Limit);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t("count")] = ModelBase::toJson(m_Count);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Listing )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("listing")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Containers::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("offset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("offset"));
        if(!fieldValue.is_null())
        {
            setOffset(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("limit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("limit"));
        if(!fieldValue.is_null())
        {
            setLimit(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("count"));
        if(!fieldValue.is_null())
        {
            setCount(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    {
        m_Listing.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("listing")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("listing")).as_array() )
        {
            if(item.is_null())
            {
                m_Listing.push_back( std::shared_ptr<Container>(nullptr) );
            }
            else
            {
                std::shared_ptr<Container> newItem(new Container());
                newItem->fromJson(item);
                m_Listing.push_back( newItem );
            }
        }
        }
    }
}

void Containers::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_OffsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offset"), m_Offset));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("limit"), m_Limit));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("count"), m_Count));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Listing )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("listing"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void Containers::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("offset")))
    {
        setOffset(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("offset"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("limit")))
    {
        setLimit(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("limit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("count")))
    {
        setCount(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("count"))));
    }
    {
        m_Listing.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("listing")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("listing"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Listing.push_back( std::shared_ptr<Container>(nullptr) );
            }
            else
            {
                std::shared_ptr<Container> newItem(new Container());
                newItem->fromJson(item);
                m_Listing.push_back( newItem );
            }
        }
        }
    }
}

int32_t Containers::getOffset() const
{
    return m_Offset;
}

void Containers::setOffset(int32_t value)
{
    m_Offset = value;
    m_OffsetIsSet = true;
}

bool Containers::offsetIsSet() const
{
    return m_OffsetIsSet;
}

void Containers::unsetOffset()
{
    m_OffsetIsSet = false;
}

int32_t Containers::getLimit() const
{
    return m_Limit;
}

void Containers::setLimit(int32_t value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool Containers::limitIsSet() const
{
    return m_LimitIsSet;
}

void Containers::unsetLimit()
{
    m_LimitIsSet = false;
}

int32_t Containers::getCount() const
{
    return m_Count;
}

void Containers::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool Containers::countIsSet() const
{
    return m_CountIsSet;
}

void Containers::unsetCount()
{
    m_CountIsSet = false;
}

std::vector<std::shared_ptr<Container>>& Containers::getListing()
{
    return m_Listing;
}

void Containers::setListing(const std::vector<std::shared_ptr<Container>>& value)
{
    m_Listing = value;
    m_ListingIsSet = true;
}

bool Containers::listingIsSet() const
{
    return m_ListingIsSet;
}

void Containers::unsetListing()
{
    m_ListingIsSet = false;
}

}
}
}
}
}
}

