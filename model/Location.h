/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Location.h
 *
 * 
 */

#ifndef IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Location_H_
#define IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Location_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

/// <summary>
/// 
/// </summary>
class  Location
    : public ModelBase
{
public:
    Location();
    virtual ~Location();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Location members

    /// <summary>
    /// GMT, C time format.
    /// </summary>
    int64_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(int64_t value);
    /// <summary>
    /// Unique identifier for the location.
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();
    void setUuid(utility::string_t value);
    /// <summary>
    /// longitude.
    /// </summary>
    double getLongitude() const;
    bool longitudeIsSet() const;
    void unsetLongitude();
    void setLongitude(double value);
    /// <summary>
    /// latitude.
    /// </summary>
    double getLatitude() const;
    bool latitudeIsSet() const;
    void unsetLatitude();
    void setLatitude(double value);
    /// <summary>
    /// type of container location, e.g. VESSEL, AIR, STREET, WAREHOUSE, PROCESSING, STORE, WITH_PATIENT, ...
    /// </summary>
    utility::string_t getLocationType() const;
    bool locationTypeIsSet() const;
    void unsetLocation_type();
    void setLocationType(utility::string_t value);

protected:
    int64_t m_Timestamp;
    bool m_TimestampIsSet;
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    double m_Longitude;
    bool m_LongitudeIsSet;
    double m_Latitude;
    bool m_LatitudeIsSet;
    utility::string_t m_Location_type;
    bool m_Location_typeIsSet;
};

}
}
}
}
}
}

#endif /* IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Location_H_ */
