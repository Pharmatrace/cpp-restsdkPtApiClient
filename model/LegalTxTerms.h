/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LegalTxTerms.h
 *
 * 
 */

#ifndef IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_LegalTxTerms_H_
#define IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_LegalTxTerms_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

/// <summary>
/// 
/// </summary>
class  LegalTxTerms
    : public ModelBase
{
public:
    LegalTxTerms();
    virtual ~LegalTxTerms();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LegalTxTerms members

    /// <summary>
    /// GMT, Unix Epoch
    /// </summary>
    int64_t getTimestampValidFrom() const;
    bool timestampValidFromIsSet() const;
    void unsetTimestamp_valid_from();
    void setTimestampValidFrom(int64_t value);
    /// <summary>
    /// GMT, Unix Epoch
    /// </summary>
    int64_t getTimestampValidUntil() const;
    bool timestampValidUntilIsSet() const;
    void unsetTimestamp_valid_until();
    void setTimestampValidUntil(int64_t value);
    /// <summary>
    /// tolerance window for transactions that begin but do not finish under the governance of these terms (in ms)
    /// </summary>
    int64_t getValidityTolerance() const;
    bool validityToleranceIsSet() const;
    void unsetValidity_tolerance();
    void setValidityTolerance(int64_t value);
    /// <summary>
    /// unique id hash of the transaction terms and conditions
    /// </summary>
    utility::string_t getTermsId() const;
    bool termsIdIsSet() const;
    void unsetTerms_id();
    void setTermsId(utility::string_t value);
    /// <summary>
    /// optional version mark of the terms
    /// </summary>
    utility::string_t getTermsVersion() const;
    bool termsVersionIsSet() const;
    void unsetTerms_version();
    void setTermsVersion(utility::string_t value);
    /// <summary>
    /// optional link to the previous version of these terms
    /// </summary>
    utility::string_t getTermsIdPreviousVersion() const;
    bool termsIdPreviousVersionIsSet() const;
    void unsetTerms_id_previous_version();
    void setTermsIdPreviousVersion(utility::string_t value);
    /// <summary>
    /// text of the terms and conditions
    /// </summary>
    utility::string_t getTermsText() const;
    bool termsTextIsSet() const;
    void unsetTerms_text();
    void setTermsText(utility::string_t value);
    /// <summary>
    /// ISO language code, e.g. en_us
    /// </summary>
    utility::string_t getLanguage() const;
    bool languageIsSet() const;
    void unsetLanguage();
    void setLanguage(utility::string_t value);
    /// <summary>
    /// legislation enforcing these terms
    /// </summary>
    utility::string_t getLegislation() const;
    bool legislationIsSet() const;
    void unsetLegislation();
    void setLegislation(utility::string_t value);

protected:
    int64_t m_Timestamp_valid_from;
    bool m_Timestamp_valid_fromIsSet;
    int64_t m_Timestamp_valid_until;
    bool m_Timestamp_valid_untilIsSet;
    int64_t m_Validity_tolerance;
    bool m_Validity_toleranceIsSet;
    utility::string_t m_Terms_id;
    bool m_Terms_idIsSet;
    utility::string_t m_Terms_version;
    bool m_Terms_versionIsSet;
    utility::string_t m_Terms_id_previous_version;
    bool m_Terms_id_previous_versionIsSet;
    utility::string_t m_Terms_text;
    bool m_Terms_textIsSet;
    utility::string_t m_Language;
    bool m_LanguageIsSet;
    utility::string_t m_Legislation;
    bool m_LegislationIsSet;
};

}
}
}
}
}
}

#endif /* IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_LegalTxTerms_H_ */
