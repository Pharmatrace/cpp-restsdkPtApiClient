/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "InformationQueryResponse.h"

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

InformationQueryResponse::InformationQueryResponse()
{
}

InformationQueryResponse::~InformationQueryResponse()
{
}

void InformationQueryResponse::validate()
{
    // TODO: implement validation
}

web::json::value InformationQueryResponse::toJson() const
{
    web::json::value val = this->Transaction::toJson();


    return val;
}

void InformationQueryResponse::fromJson(web::json::value& val)
{
    this->Transaction::fromJson(val);

}

void InformationQueryResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
    if(m_Tx_uidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tx_uid"), m_Tx_uid));
    }
    if(m_Terms_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("terms_id"), m_Terms_id));
    }
    if(m_Transaction_channelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transaction_channel"), m_Transaction_channel));
    }
}

void InformationQueryResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tx_uid")))
    {
        setTxUid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tx_uid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("terms_id")))
    {
        setTermsId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("terms_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transaction_channel")))
    {
        setTransactionChannel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("transaction_channel"))));
    }
}

}
}
}
}
}
}

