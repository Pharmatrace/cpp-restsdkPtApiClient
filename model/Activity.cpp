/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Activity.h"

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

Activity::Activity()
{
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
}

Activity::~Activity()
{
}

void Activity::validate()
{
    // TODO: implement validation
}

web::json::value Activity::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t("uuid")] = ModelBase::toJson(m_Uuid);
    }

    return val;
}

void Activity::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("uuid")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("uuid")];
        if(!fieldValue.is_null())
        {
            setUuid(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Activity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uuid"), m_Uuid));
    }
}

void Activity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("uuid")))
    {
        setUuid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("uuid"))));
    }
}

utility::string_t Activity::getUuid() const
{
    return m_Uuid;
}


void Activity::setUuid(utility::string_t value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}
bool Activity::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Activity::unsetUuid()
{
    m_UuidIsSet = false;
}

}
}
}
}
}
}

