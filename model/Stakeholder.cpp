/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Stakeholder.h"

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

Stakeholder::Stakeholder()
{
    m_Trade_id = utility::conversions::to_string_t("");
    m_Trade_idIsSet = false;
    m_Trade_id_type = utility::conversions::to_string_t("");
    m_Trade_id_typeIsSet = false;
    m_Display_name = utility::conversions::to_string_t("");
    m_Display_nameIsSet = false;
    m_Stakeholder_role = utility::conversions::to_string_t("");
    m_Stakeholder_roleIsSet = false;
    m_Wallet_id = utility::conversions::to_string_t("");
    m_Wallet_idIsSet = false;
}

Stakeholder::~Stakeholder()
{
}

void Stakeholder::validate()
{
    // TODO: implement validation
}

web::json::value Stakeholder::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Trade_idIsSet)
    {
        val[utility::conversions::to_string_t("trade_id")] = ModelBase::toJson(m_Trade_id);
    }
    if(m_Trade_id_typeIsSet)
    {
        val[utility::conversions::to_string_t("trade_id_type")] = ModelBase::toJson(m_Trade_id_type);
    }
    if(m_Display_nameIsSet)
    {
        val[utility::conversions::to_string_t("display_name")] = ModelBase::toJson(m_Display_name);
    }
    if(m_Stakeholder_roleIsSet)
    {
        val[utility::conversions::to_string_t("stakeholder_role")] = ModelBase::toJson(m_Stakeholder_role);
    }
    if(m_Wallet_idIsSet)
    {
        val[utility::conversions::to_string_t("wallet_id")] = ModelBase::toJson(m_Wallet_id);
    }

    return val;
}

void Stakeholder::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("trade_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trade_id"));
        if(!fieldValue.is_null())
        {
            setTradeId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_id_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trade_id_type"));
        if(!fieldValue.is_null())
        {
            setTradeIdType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("display_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("display_name"));
        if(!fieldValue.is_null())
        {
            setDisplayName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stakeholder_role")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stakeholder_role"));
        if(!fieldValue.is_null())
        {
            setStakeholderRole(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wallet_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wallet_id"));
        if(!fieldValue.is_null())
        {
            setWalletId(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Stakeholder::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Trade_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_id"), m_Trade_id));
    }
    if(m_Trade_id_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_id_type"), m_Trade_id_type));
    }
    if(m_Display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("display_name"), m_Display_name));
    }
    if(m_Stakeholder_roleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stakeholder_role"), m_Stakeholder_role));
    }
    if(m_Wallet_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wallet_id"), m_Wallet_id));
    }
}

void Stakeholder::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("trade_id")))
    {
        setTradeId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_id_type")))
    {
        setTradeIdType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_id_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("display_name")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("display_name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stakeholder_role")))
    {
        setStakeholderRole(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("stakeholder_role"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wallet_id")))
    {
        setWalletId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("wallet_id"))));
    }
}

utility::string_t Stakeholder::getTradeId() const
{
    return m_Trade_id;
}

void Stakeholder::setTradeId(const utility::string_t& value)
{
    m_Trade_id = value;
    m_Trade_idIsSet = true;
}

bool Stakeholder::tradeIdIsSet() const
{
    return m_Trade_idIsSet;
}

void Stakeholder::unsetTrade_id()
{
    m_Trade_idIsSet = false;
}

utility::string_t Stakeholder::getTradeIdType() const
{
    return m_Trade_id_type;
}

void Stakeholder::setTradeIdType(const utility::string_t& value)
{
    m_Trade_id_type = value;
    m_Trade_id_typeIsSet = true;
}

bool Stakeholder::tradeIdTypeIsSet() const
{
    return m_Trade_id_typeIsSet;
}

void Stakeholder::unsetTrade_id_type()
{
    m_Trade_id_typeIsSet = false;
}

utility::string_t Stakeholder::getDisplayName() const
{
    return m_Display_name;
}

void Stakeholder::setDisplayName(const utility::string_t& value)
{
    m_Display_name = value;
    m_Display_nameIsSet = true;
}

bool Stakeholder::displayNameIsSet() const
{
    return m_Display_nameIsSet;
}

void Stakeholder::unsetDisplay_name()
{
    m_Display_nameIsSet = false;
}

utility::string_t Stakeholder::getStakeholderRole() const
{
    return m_Stakeholder_role;
}

void Stakeholder::setStakeholderRole(const utility::string_t& value)
{
    m_Stakeholder_role = value;
    m_Stakeholder_roleIsSet = true;
}

bool Stakeholder::stakeholderRoleIsSet() const
{
    return m_Stakeholder_roleIsSet;
}

void Stakeholder::unsetStakeholder_role()
{
    m_Stakeholder_roleIsSet = false;
}

utility::string_t Stakeholder::getWalletId() const
{
    return m_Wallet_id;
}

void Stakeholder::setWalletId(const utility::string_t& value)
{
    m_Wallet_id = value;
    m_Wallet_idIsSet = true;
}

bool Stakeholder::walletIdIsSet() const
{
    return m_Wallet_idIsSet;
}

void Stakeholder::unsetWallet_id()
{
    m_Wallet_idIsSet = false;
}

}
}
}
}
}
}

