/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-beta2.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Wallet.h"

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

Wallet::Wallet()
{
    m_Balance = 0.0;
    m_BalanceIsSet = false;
    m_Wallet_id = utility::conversions::to_string_t("");
    m_Wallet_idIsSet = false;
    m_Display_name = utility::conversions::to_string_t("");
    m_Display_nameIsSet = false;
    m_Owner_stakeholder_id = utility::conversions::to_string_t("");
    m_Owner_stakeholder_idIsSet = false;
}

Wallet::~Wallet()
{
}

void Wallet::validate()
{
    // TODO: implement validation
}

web::json::value Wallet::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_BalanceIsSet)
    {
        val[utility::conversions::to_string_t("balance")] = ModelBase::toJson(m_Balance);
    }
    if(m_Wallet_idIsSet)
    {
        val[utility::conversions::to_string_t("wallet_id")] = ModelBase::toJson(m_Wallet_id);
    }
    if(m_Display_nameIsSet)
    {
        val[utility::conversions::to_string_t("display_name")] = ModelBase::toJson(m_Display_name);
    }
    if(m_Owner_stakeholder_idIsSet)
    {
        val[utility::conversions::to_string_t("owner_stakeholder_id")] = ModelBase::toJson(m_Owner_stakeholder_id);
    }

    return val;
}

void Wallet::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("balance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("balance"));
        if(!fieldValue.is_null())
        {
            setBalance(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wallet_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wallet_id"));
        if(!fieldValue.is_null())
        {
            setWalletId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("display_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("display_name"));
        if(!fieldValue.is_null())
        {
            setDisplayName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("owner_stakeholder_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("owner_stakeholder_id"));
        if(!fieldValue.is_null())
        {
            setOwnerStakeholderId(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Wallet::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_BalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("balance"), m_Balance));
    }
    if(m_Wallet_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wallet_id"), m_Wallet_id));
    }
    if(m_Display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("display_name"), m_Display_name));
    }
    if(m_Owner_stakeholder_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owner_stakeholder_id"), m_Owner_stakeholder_id));
    }
}

void Wallet::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("balance")))
    {
        setBalance(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("balance"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wallet_id")))
    {
        setWalletId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("wallet_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("display_name")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("display_name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owner_stakeholder_id")))
    {
        setOwnerStakeholderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("owner_stakeholder_id"))));
    }
}

double Wallet::getBalance() const
{
    return m_Balance;
}

void Wallet::setBalance(double value)
{
    m_Balance = value;
    m_BalanceIsSet = true;
}

bool Wallet::balanceIsSet() const
{
    return m_BalanceIsSet;
}

void Wallet::unsetBalance()
{
    m_BalanceIsSet = false;
}

utility::string_t Wallet::getWalletId() const
{
    return m_Wallet_id;
}

void Wallet::setWalletId(const utility::string_t& value)
{
    m_Wallet_id = value;
    m_Wallet_idIsSet = true;
}

bool Wallet::walletIdIsSet() const
{
    return m_Wallet_idIsSet;
}

void Wallet::unsetWallet_id()
{
    m_Wallet_idIsSet = false;
}

utility::string_t Wallet::getDisplayName() const
{
    return m_Display_name;
}

void Wallet::setDisplayName(const utility::string_t& value)
{
    m_Display_name = value;
    m_Display_nameIsSet = true;
}

bool Wallet::displayNameIsSet() const
{
    return m_Display_nameIsSet;
}

void Wallet::unsetDisplay_name()
{
    m_Display_nameIsSet = false;
}

utility::string_t Wallet::getOwnerStakeholderId() const
{
    return m_Owner_stakeholder_id;
}

void Wallet::setOwnerStakeholderId(const utility::string_t& value)
{
    m_Owner_stakeholder_id = value;
    m_Owner_stakeholder_idIsSet = true;
}

bool Wallet::ownerStakeholderIdIsSet() const
{
    return m_Owner_stakeholder_idIsSet;
}

void Wallet::unsetOwner_stakeholder_id()
{
    m_Owner_stakeholder_idIsSet = false;
}

}
}
}
}
}
}

