/**
 * PharmaTrace Supply Chain Information Network API
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Wallet.h
 *
 * 
 */

#ifndef IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Wallet_H_
#define IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Wallet_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace pharmatrace {
namespace api {
namespace scin {
namespace public {
namespace model {

/// <summary>
/// 
/// </summary>
class  Wallet
    : public ModelBase
{
public:
    Wallet();
    virtual ~Wallet();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Wallet members

    /// <summary>
    /// current balance
    /// </summary>
    double getBalance() const;
    bool balanceIsSet() const;
    void unsetBalance();
    void setBalance(double value);
    /// <summary>
    /// wallet uuid
    /// </summary>
    utility::string_t getWalletId() const;
    bool walletIdIsSet() const;
    void unsetWallet_id();
    void setWalletId(utility::string_t value);
    /// <summary>
    /// descriptive name of the wallet so user can identify it if s/he has multiple wallets
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplay_name();
    void setDisplayName(utility::string_t value);
    /// <summary>
    /// id of the wallet owner (normally an organization
    /// </summary>
    utility::string_t getOwnerStakeholderId() const;
    bool ownerStakeholderIdIsSet() const;
    void unsetOwner_stakeholder_id();
    void setOwnerStakeholderId(utility::string_t value);

protected:
    double m_Balance;
    bool m_BalanceIsSet;
    utility::string_t m_Wallet_id;
    bool m_Wallet_idIsSet;
    utility::string_t m_Display_name;
    bool m_Display_nameIsSet;
    utility::string_t m_Owner_stakeholder_id;
    bool m_Owner_stakeholder_idIsSet;
};

}
}
}
}
}
}

#endif /* IO_PHARMATRACE_API_SCIN_PUBLIC_MODEL_Wallet_H_ */
